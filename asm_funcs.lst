     1                                  ; ----------------------------------------------------------------------------------------
     2                                  ; Implementation of function list_find for use in hash_table.cpp
     3                                  ; ----------------------------------------------------------------------------------------
     4                                  
     5                                  section .text
     6                                  global list_find
     7                                  global compare_keys
     8                                  
     9                                  ; ----------------------------------------------------------------------------------------
    10                                  ; hash_table_status_t list_find(node_t *list, char *ptr_to_etalon_key, data_t *result)
    11                                  ;
    12                                  ; Entry: rdi = node_t* list
    13                                  ;        rsi = char*   ptr_to_etalon_key
    14                                  ;        rdx = data_t* result
    15                                  ;
    16                                  ; Exit:  rdx = &result (if successfull)
    17                                  ;        eax = status
    18                                  ;
    19                                  ; Destr: ymm0, rbx, rdi, rdx
    20                                  ; ----------------------------------------------------------------------------------------
    21                                  list_find:
    22                                  
    23                                      ; __m256i etalon_key  = _mm256_load_si256((__m256i*) ptr_to_etalon_key);
    24 00000000 C5FD6F06                        vmovdqa ymm0, [rsi]
    25                                  
    26                                      ; we can use rbx, because caller saved doesn't use it after calling list_find
    27                                      ; also caller saves rbx for caller of caller
    28                                      ; node_t* current_elem = list;
    29 00000004 4889FB                          mov rbx, rdi
    30                                  
    31                                      ; while (current_elem)
    32                                      .while_loop:
    33 00000007 4885DB                          test    rbx, rbx
    34 0000000A 741D                            jz      .while_end
    35                                  
    36                                      ; bool cmp_result = compare_keys(etalon_key, current_elem->key)
    37 0000000C 488B3B                          mov rdi, [rbx]
    38 0000000F E81B000000                      call compare_keys
    39                                  
    40                                      ; if (cmp_result)
    41                                          ; test al, al
    42 00000014 7406                            jz .find_successfull
    43                                  
    44                                      .find_failed:
    45                                      ; current_elem = current_elem->next;
    46 00000016 488B5B10                        mov rbx, [rbx + 16]
    47 0000001A EBEB                            jmp .while_loop
    48                                  
    49                                      .find_successfull:
    50                                      ; *result = current_elem->data;
    51 0000001C 488B4308                        mov rax, [rbx+8]
    52 00000020 488902                          mov [rdx], rax
    53                                  
    54                                      ; return HASH_TABLE_SUCCESS
    55 00000023 B800000000                      mov eax, 0
    56 00000028 C3                              ret
    57                                  
    58                                      .while_end:
    59                                      ; return HASH_TABLE_FIND_FAILURE
    60 00000029 B802000000                      mov eax, 2
    61 0000002E C3                              ret
    62                                  
    63                                  ; ----------------------------------------------------------------------------------------
    64                                  ; bool compare_keys(__m256i etalon_key, char* ptr_to_key)
    65                                  ;
    66                                  ; Entry: ymm0 = etalon_key
    67                                  ;        rdi  = ptr_to_key
    68                                  ;
    69                                  ; Exit:  al = result
    70                                  ;
    71                                  ; Destr: ymm0
    72                                  ; ----------------------------------------------------------------------------------------
    73                                  compare_keys:
    74                                  
    75                                      ;__m256i key = _mm256_load_si256((__m256i*) ptr_to_key);
    76 0000002F C5FD740F                        vpcmpeqb ymm1, ymm0, [rdi]
    77                                  
    78                                      ; __m256i cmp_mask = _mm256_cmpeq_epi8(etalon_key, key);
    79 00000033 C5FDD7C1                        vpmovmskb eax, ymm1
    80                                  
    81                                      ; int mask = _mm256_movemask_epi8(cmp_mask);
    82 00000037 83F8FF                          cmp     eax, 0FFFFFFFFh
    83                                          ; setz    al
    84 0000003A C3                              retn
